
1)Список клиентов, которые имеют просроченные книги

SELECT c.first_name, c.last_name, c.email, c.phone_number, b.title, i.due_date from customers as c
JOIN issued_books as i ON c.id = i.customer_id
JOIN books as b ON i.book_id=b.id
WHERE i.return_date is null  AND i.due_date < current_date;

2)Перечислить самые популярные книги (самые выпущенные)

SELECT b.title, COUNT(i.book_id) from issued_books as i
JOIN books as b on i.book_id=b.id
GROUP BY b.title 
ORDER BY total_issued desc;

3)Список клиентов, которые никогда не выпускали книг

SELECT * FROM customers
WHERE id not in (SELECT customer_id FROM issued_books);


4)Обновить цену книги на 10% для книг, выпущенных до текущей даты

update books 
set price=price*1.1
where id in (select book_id from issued_books
where issue_date<current_date)



5)Общие поступления от выпущенных книг

select sum(price) from books as b
inner join issued_books as i on i.book_id=b.id
where i.issue_date is not null



6)Список книг и кто за них отвечает 
select b.title,s.name from books as b
inner join staff as s on s.c= b.category
order by b.id asc

7)Сколько книг курирует каждый из персонала

select s.name,count(b.title) from books as b
inner join staff as s on s.c= b.category
group by s.name


8) Рейгнинг и количество использований каждой книги
select* from books as b
inner join rating as  r on r.book_id=b.id

9)Самый популярный автор и книга в категории

select b.title,b.author,b.category,b.count from (select * from books as b inner join rating as r on r.book_id=b.id) b
inner join 
(select category, max(r.count) as max from rating as r
inner join books b on r.book_id=b.id
group by category) a on a.category=b.category and a.max=b.count 
order by b.count desc


10)Анализ с помощью оконных функций

select b.category,rating ,cast(avg(rating) over(partition by b.category)as numeric(5,2)),sum(count) over(partition by b.category)as taken,
min(rating) over (partition by b.category) as min_rat,max(rating) over (partition by b.category) as max_rat,
cast(percent_rank() over(partition by b.category order by rating)as numeric(5,3))
from books as b
inner join rating as  r on r.book_id=b.id


По данным можно сделать вывод, что
1. максимальный ср.рейтинг у Biography, минимальный ср.рейтинг у Romance, 
2. больше всего берут History, меньше всего Self-Help
3. Romance также получала наихудшие из всех оценки
4. все кроме History получали максимальную оценку 
5. категории, у которых оценка больше чем 4.2, -это Biography (67%), History (56%), Mystery (55%)
хуже всего показатель у Fiction (23%), но насчет Self-Help сложно что то скзать так как их всего 2

